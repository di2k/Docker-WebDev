# version: "3.8"

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d # Nginx configs for multiple sites
      - ./html:/var/www/html # All apps available to Nginx
      - ./ssl:/etc/nginx/ssl # SSL certificates
    environment:
      - CLIENT_MAX_BODY_SIZE=100M
    networks:
      - mynetwork

  php74:
    build:
      context: ./php74
    container_name: php74
    restart: unless-stopped
    volumes:
      - ./html:/var/www/html # All apps are mounted so PHP has access to each app
    networks:
      - mynetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"

  php80:
    build:
      context: ./php80
    container_name: php80
    volumes:
      - ./html:/var/www/html # All apps are mounted so PHP has access to each app
    networks:
      - mynetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"

  php83:
    build:
      context: ./php83
    container_name: php83
    restart: unless-stopped
    volumes:
      - ./html:/var/www/html # All apps are mounted so PHP has access to each app
    networks:
      - mynetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
    ports:
      - "3307:3306"
    volumes:
      - ./db_data:/var/lib/mysql
    networks:
      - mynetwork

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.19
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=changeme
      - "cluster.name=docker-cluster"
      - "network.host=0.0.0.0"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mynetwork

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.19
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
      - I18N_LOCALE=en
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - mynetwork

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - mynetwork
    restart: unless-stopped

  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_DB: exampledb
      POSTGRES_USER: exampleuser
      POSTGRES_PASSWORD: examplepass
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "4124:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafanapass
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mynetwork
    depends_on:
      - elasticsearch
      - postgresql
    restart: unless-stopped

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    networks:
      - mynetwork
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=influxpass
      - DOCKER_INFLUXDB_INIT_ORG=myorg
      - DOCKER_INFLUXDB_INIT_BUCKET=sensors
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=your-super-secret-token
    networks:
      - mynetwork
    restart: unless-stopped

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - mosquitto
    networks:
      - mynetwork
    restart: unless-stopped

networks:
  mynetwork:
    driver: bridge

volumes:
  mariadb_data:
  elasticsearch_data:
  mongodb_data:
  postgresql_data:
  grafana_data:
  influxdb_data:
